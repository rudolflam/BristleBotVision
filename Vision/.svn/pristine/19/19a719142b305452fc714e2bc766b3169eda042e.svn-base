package sight;

import java.awt.image.BufferedImage;
import java.awt.image.DataBufferByte;
import java.io.IOException;
import java.nio.file.DirectoryStream;
import java.nio.file.Files;
import java.nio.file.Path;
import java.nio.file.Paths;

import org.bytedeco.javacpp.opencv_core.IplImage;
import org.bytedeco.javacv.CanvasFrame;
import org.opencv.core.CvType;
import org.opencv.core.Mat;
import org.opencv.highgui.Highgui;
import org.opencv.imgproc.Imgproc;
import org.opencv.core.Core;

public class ShadowDetector {
	
	static String testImageLocation = "./Img/room.jpg";
	static String testImageOut = "./Img/RoomOut.jpg";
	
	private String imgPath ;
	
	public ShadowDetector(String imgpath) {
		this.imgPath = imgpath;
	}
	
	/**
	 * Loads native library
	 */
	public static void init(){
		System.loadLibrary(Core.NATIVE_LIBRARY_NAME);
	}

	/**
	 * @param imgPath		File path to the image
	 * @return				A BufferedImage in gray scale of the image
	 */
	public static BufferedImage toGrayScale(String imgPath){
		//read image and create a source matrix and an output matrix 
		Mat src = Highgui.imread(imgPath);
		Mat out = MatUtils.createSameSizeMat(src, CvType.CV_8UC1);
		
		// convert to grayscale and put into out 
		Imgproc.cvtColor(src, out, Imgproc.COLOR_RGB2GRAY);
		
		return MatUtils.getBufferedImageFromMat(out, BufferedImage.TYPE_BYTE_GRAY);
	}
	
	/**
	 * Displays the image in a CanvasFrame
	 */
	public void show(){
		CanvasFrame frame = new CanvasFrame("Image outpout");
		frame.showImage( IplImage.createFrom(ShadowDetector.toGrayScale(this.imgPath)) );
	}
	
	public static void main(String[] args) {
		ShadowDetector detector = new ShadowDetector(testImageLocation);
		ShadowDetector.init();
		detector.show();
	}
}
